## Make sure to use the `as.Date` function again
winter_break <- as.Date("2018-12-15")
## Create a variable `days_to_break` that is how many days until break (hint: subtract the dates!)
days_to_break <- winter_break - today
## Define a function called `bday_intro` that takes in three arguments:
## a name, an age, and a character string for your next (upcoming) birthday.
## This method should return a character string of the format:
##  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `make_introduction` function from Part 1, and compute {N} and {new_age} in your
## function
bday_intro <- function(name, age, nextbday) {
N <- as.Date(nextbday) - today
new_age <- age + 1
paste(make_introduction(name, age), "In", N, "days I'll be", new_age)
}
## Create a variable `my_bday_intro` using the `bday_intro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- bday_intro(my_name, my_age, "2019-04-29")
## Note: you may look up 'lubridate' package by Hadley Wickham for more convenient handling of dates
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(vector_of_strings) {
return (str_replace_all(vector_of_strings, "[0-9]", ""))
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
vector_of_courses <- RemoveDigits(c("INFO 201", "CSE 351", "FRENCH 101"))
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (any(str_detect(vector_of_courses, "[0-9]"))) {
print("Oh no!")
} else {
print("Yay!")
}
install.packages("dplyr")
install.packages("babynames")
library(dplyr)
library(babynames)
babynames % > %
filter(name == 'Ashley')
head()
library(dplyr)
library(babynames)
head(babynames)
library(dplyr)
library(babynames)
babynames
filter(sex == 'F')
group_by(name)
summarize(n = sum(n))
filter(min_rank(desc(n)) == 3)
library(dplyr)
library(babynames)
babynames::babynames
filter(sex == 'F')
group_by(name)
summarize(n = sum(n))
filter(min_rank(desc(n)) == 3)
library(dplyr)
library(babynames)
babynames::babynames
filter(sex == 'F')
group_by(name)
summarize(n = sum(n))
filter(min_rank(desc(n)) == 3)
library(dplyr)
library(babynames)
babynames %>%
filter(sex == 'F') %>%
group_by(name)
summarize(n = sum(n))
filter(min_rank(desc(n)) == 3)
library(dplyr)
library(babynames)
babynames %>%
filter(sex == 'F') %>%
group_by(name) %>%
summarize(n = sum(n)) %>%
filter(min_rank(desc(n)) == 3)
library(dplyr)
library(babynames)
babynames %>%
filter(sex == 'F') %>%
group_by(name) %>%
summarize(n = sum(n)) %>%
filter(name == 'Ashley') %>%
library(dplyr)
library(babynames)
babynames %>%
filter(sex == 'F') %>%
group_by(name) %>%
summarize(n = sum(n)) %>%
filter(name == 'Ashley') %>%
head() %>%
library(dplyr)
library(babynames)
babynames %>%
filter(sex == 'F') %>%
group_by(name) %>%
summarize(n = sum(n)) %>%
filter(name == 'Ashley')
head() %>%
library(dplyr)
library(babynames)
babynames %>%
filter(sex == 'F') %>%
group_by(name) %>%
summarize(n = sum(n)) %>%
filter(name == 'Ashley')
arrange(desc(n)) %>%
head() %>%
library(dplyr)
library(babynames)
babynames %>%
filter(sex == 'F') %>%
group_by(name) %>%
summarize(n = sum(n)) %>%
filter(name == 'Ashley')
arrange(desc(n)) %>%
print(n)
head() %>%
library(dplyr)
library(babynames)
babynames %>%
filter(sex == 'F') %>%
group_by(name) %>%
summarize(n = sum(n)) %>%
mutate(place = min_rank(desc(n))) %>%
filter(name == 'Ashley')
### This file contains your main code.
### Feel free to rename it, or split it into several files.
###
### Your final product should contain the code along the following lines:
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(knitr)
library(ggplot2)
source("keys.R", local = TRUE)
##    ---------- Google Civic Information API ----------
## 1. create the google civic platform request and httr::GET() the result
##    you need to include your api key in the request.  See the documentation
##    https://developers.google.com/civic-information/
##    https://developers.google.com/civic-information/docs/v2/
##    in particular the reference section.
##
##    Note: you can try the requests by submitting these through your browser by entering the
##    full query (base url, endpoint, query) in your browser's address bar.
##    If it is correct correct, it will display the corresponding JSON data.  If
##    incorrect, you get an error message.
base <- "https://www.googleapis.com/civicinfo/v2"
org <- "/representatives"
query <- list(address = "Seattle, WA", key = google_key)
uri <- paste0(base, org)
google_result <- GET(uri, query = query)
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    https://info201.github.io/dplyr.html#joins
##    http://r4ds.had.co.nz/relational-data.html
merge_officials_offices <- function() {
content_elected_officials <- content(google_result, "text")
elected_officials_fromJSON <- fromJSON(content_elected_officials)
officialIndices <- unlist(elected_officials_fromJSON$offices$officialIndices)
officials_list <- elected_officials_fromJSON$officials %>% mutate(officialIndices)
offices_list <- elected_officials_fromJSON$offices %>% mutate(officialIndices = head(unlist(officialIndices), -1))
joint <- left_join(officials_list, offices_list, by = "officialIndices")
}
### This file contains your main code.
### Feel free to rename it, or split it into several files.
###
### Your final product should contain the code along the following lines:
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(knitr)
library(ggplot2)
source("keys.R", local = TRUE)
##    ---------- Google Civic Information API ----------
## 1. create the google civic platform request and httr::GET() the result
##    you need to include your api key in the request.  See the documentation
##    https://developers.google.com/civic-information/
##    https://developers.google.com/civic-information/docs/v2/
##    in particular the reference section.
##
##    Note: you can try the requests by submitting these through your browser by entering the
##    full query (base url, endpoint, query) in your browser's address bar.
##    If it is correct correct, it will display the corresponding JSON data.  If
##    incorrect, you get an error message.
base <- "https://www.googleapis.com/civicinfo/v2"
org <- "/representatives"
query <- list(address = "Seattle, WA", key = google_key)
uri <- paste0(base, org)
google_result <- GET(uri, query = query)
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    https://info201.github.io/dplyr.html#joins
##    http://r4ds.had.co.nz/relational-data.html
merge_officials_offices <- function() {
content_elected_officials <- content(google_result, "text")
elected_officials_fromJSON <- fromJSON(content_elected_officials)
officialIndices <- unlist(elected_officials_fromJSON$offices$officialIndices)
officials_list <- elected_officials_fromJSON$officials %>% mutate(officialIndices)
offices_list <- elected_officials_fromJSON$offices %>% mutate(officialIndices = head(unlist(officialIndices), -1))
joint <- left_join(officials_list, offices_list, by = "officialIndices")
}
### This file contains your main code.
### Feel free to rename it, or split it into several files.
###
### Your final product should contain the code along the following lines:
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(knitr)
library(ggplot2)
source("keys.R", local = TRUE)
##    ---------- Google Civic Information API ----------
## 1. create the google civic platform request and httr::GET() the result
##    you need to include your api key in the request.  See the documentation
##    https://developers.google.com/civic-information/
##    https://developers.google.com/civic-information/docs/v2/
##    in particular the reference section.
##
##    Note: you can try the requests by submitting these through your browser by entering the
##    full query (base url, endpoint, query) in your browser's address bar.
##    If it is correct correct, it will display the corresponding JSON data.  If
##    incorrect, you get an error message.
base <- "https://www.googleapis.com/civicinfo/v2"
org <- "/representatives"
query <- list(address = "Seattle, WA", key = google_key)
uri <- paste0(base, org)
google_result <- GET(uri, query = query)
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    https://info201.github.io/dplyr.html#joins
##    http://r4ds.had.co.nz/relational-data.html
merge_officials_offices <- function() {
content_elected_officials <- content(google_result, "text")
elected_officials_fromJSON <- fromJSON(content_elected_officials)
officialIndices <- unlist(elected_officials_fromJSON$offices$officialIndices)
officials_list <- elected_officials_fromJSON$officials %>% mutate(officialIndices)
offices_list <- elected_officials_fromJSON$offices %>% mutate(officialIndices = head(unlist(officialIndices), -1))
joint <- left_join(officials_list, offices_list, by = "officialIndices")
}
## 3. transform the data into a well formatted table
##    I recommend you transform the data into markdown strings.  For instance,
##    to display a html link as a link in the markdown file, you may want to
##    embed it between "[](" and ")".
##
##    You may want to consider improved table printing, look for details at the rmarkdown
##    page at
##    http://rmarkdown.rstudio.com/index.html
##
joint <- select(joint, name.x, roles, party, emails, phones, photoUrl)
table <- kable(joint, escape = FALSE)
## -------------------- propublica --------------------
## 4. Get state representatives from propublica congress API
##    you need the respective API key.
##
##    Note1: the api key must be sent as 'X-API-Key'.  No other name, such as 'api-key'
##    will work.
##
##    Note2: Propublica API has several endpoints.  The relevant one here is 'members'.
##    It which allows you to get lists of members, lists of members by state,
##    specific member by id, voting data, and more.
##
##    Read the documentation:
##    https://projects.propublica.org/api-docs/congress-api/members/
##
base <- "https://api.propublica.org/congress/v1"
congress <- paste0("/", 115)
chamber <- "/house"
propublica_uri <- paste0(base, congress, chamber, "/members.json")
propublica_result <- GET(propublica_uri, add_headers('X-API-Key' = propublica_key))
http_status(propublica_result)
## 5. transform it in a form you can use for visualizations.
##
##    For the first visualization you have to extract the party affiliation of all the members
##    and make a histogram of that data.
##
content_propublica<- content(propublica_result, "text")
propublica_fromJSON <- fromJSON(content_propublica)
shiny::runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
view("../data/UFOCoords.csv.bz2")
detach("package:utils", unload=TRUE)
library("utils", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
shiny::runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
data %>%
filter(month.name[substring(Date, 1, 1)] == input$month)
View( read.csv("../data/UFOCoords.csv.bz2", stringsAsFactors = FALSE))
read.csv("/Users/jessica/Desktop/INFO201/a8-app-jessicachen29/data/UFOCoords.csv.bz2", stringsAsFactors = FALSE)
View(read.csv("/Users/jessica/Desktop/INFO201/a8-app-jessicachen29/data/UFOCoords.csv.bz2", stringsAsFactors = FALSE))
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
read.csv("/Users/jessica/Desktop/INFO201/a8-app-jessicachen29/data/UFOCoords.csv.bz2", stringsAsFactors = FALSE) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>% View()
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
read.csv("/Users/jessica/Desktop/INFO201/a8-app-jessicachen29/data/UFOCoords.csv.bz2", stringsAsFactors = FALSE) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>% View()
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
read.csv("/Users/jessica/Desktop/INFO201/a8-app-jessicachen29/data/UFOCoords.csv.bz2", stringsAsFactors = FALSE) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>%  View()
data <- read.csv("/Users/jessica/Desktop/INFO201/a8-app-jessicachen29/data/UFOCoords.csv.bz2", stringsAsFactors = FALSE) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>% months(Date)
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>% format(Date, "%m")
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
read.csv("/Users/jessica/Desktop/INFO201/a8-app-jessicachen29/data/UFOCoords.csv.bz2", stringsAsFactors = FALSE) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>%  View()
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
read.csv("/Users/jessica/Desktop/INFO201/a8-app-jessicachen29/data/UFOCoords.csv.bz2", stringsAsFactors = FALSE) %>%
mutate(Date = as.Date(Date, format = "%y-%m-%d"))
%>%  View()
read.csv("/Users/jessica/Desktop/INFO201/a8-app-jessicachen29/data/UFOCoords.csv.bz2", stringsAsFactors = FALSE) %>%
mutate(Date = as.Date(Date, format = "%y-%m-%d"))%>%  View()
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
read.csv("/Users/jessica/Desktop/INFO201/a8-app-jessicachen29/data/UFOCoords.csv.bz2", stringsAsFactors = FALSE) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>%  View()
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
read.csv("/Users/jessica/Desktop/INFO201/a8-app-jessicachen29/data/UFOCoords.csv.bz2", stringsAsFactors = FALSE) %>%
mutate(Date = as.Date(Date, format = "%y-%m-%d"))%>% filter(month.name[months(Date)] == "January") %>%  View()
read.csv("/Users/jessica/Desktop/INFO201/a8-app-jessicachen29/data/UFOCoords.csv.bz2", stringsAsFactors = FALSE) %>%
mutate(Date = as.Date(Date, format = "%y-%m-%d"))%>% select(Date) %>%  View()
read.csv("/Users/jessica/Desktop/INFO201/a8-app-jessicachen29/data/UFOCoords.csv.bz2", stringsAsFactors = FALSE) %>%
mutate(Date = as.Date(Date, format = "%y-%m-%d"))%>%  View()
read.csv("/Users/jessica/Desktop/INFO201/a8-app-jessicachen29/data/UFOCoords.csv.bz2", stringsAsFactors = FALSE) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%y"))%>% select(Date) %>%  View()
read.csv("/Users/jessica/Desktop/INFO201/a8-app-jessicachen29/data/UFOCoords.csv.bz2", stringsAsFactors = FALSE) %>%
mutate(Date = months(as.Date(Date, format = "%m/%d/%y"))) %>% View()
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
View(map_data("world")
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
View(map_data("world")) %>% head()
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
runApp('Desktop/INFO201/a8-app-jessicachen29/exploreUFO')
shiny::runApp('Desktop/INFO201/info201_bb5')
runApp('Desktop/INFO201/info201_bb5')
runApp('Desktop/INFO201/info201_bb5')
runApp('Desktop/INFO201/info201_bb5')
runApp('Desktop/INFO201/info201_bb5')
runApp('Desktop/INFO201/info201_bb5')
data <- data %>%
filter(StageID == "MiddleSchool") %>%
group_by(Class) %>%
count(ParentAnsweringSurvey) %>%
mutate(percentage = n / sum(n)*100)
ggplot(data, aes(x=Class, y=percentage, fill=ParentAnsweringSurvey)) +
geom_bar(stat="identity")
library(ggplot2)
library(dplyr)
data <- data.table::fread("/Users/jessica/Desktop/INFO201/info201_bb5/data/xAPI-Edu-Data.csv")
data <- data %>%
filter(StageID == "MiddleSchool") %>%
group_by(Class) %>%
count(ParentAnsweringSurvey) %>%
mutate(percentage = n / sum(n)*100)
ggplot(data, aes(x=Class, y=percentage, fill=ParentAnsweringSurvey)) +
geom_bar(stat="identity")
runApp('Desktop/INFO201/info201_bb5')
runApp('Desktop/INFO201/info201_bb5')
runApp('Desktop/INFO201/info201_bb5')
setwd("~/Desktop/INFO201/info201_bb5")
runApp()
runApp()
runApp()
runApp('KalBoard360Analysis')
runApp()
runApp('KalBoard360Analysis')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- data %>%
filter(StageID == "lowerlevel") %>%
group_by(Class) %>%
count(ParentAnsweringSurvey) %>%
mutate(percentage = n / sum(n)*100)
data <- data %>%
filter(StageID == "MiddleSchool") %>%
group_by(Class) %>%
count(ParentAnsweringSurvey) %>%
mutate(percentage = n / sum(n)*100)
library(ggplot2)
library(dplyr)
data <- data.table::fread("/Users/jessica/Desktop/INFO201/info201_bb5/data/xAPI-Edu-Data.csv")
data <- data %>%
filter(StageID == "MiddleSchool") %>%
group_by(Class) %>%
count(ParentAnsweringSurvey) %>%
mutate(percentage = n / sum(n)*100)
ggplot(data, aes(x=Class, y=percentage, fill=ParentAnsweringSurvey)) +
geom_bar(stat="identity")
library(ggplot2)
library(dplyr)
data <- data.table::fread("/Users/jessica/Desktop/INFO201/info201_bb5/data/xAPI-Edu-Data.csv")
data <- data %>%
filter(StageID == "lowerlevel") %>%
group_by(Class) %>%
count(ParentAnsweringSurvey) %>%
mutate(percentage = n / sum(n)*100)
ggplot(data, aes(x=Class, y=percentage, fill=ParentAnsweringSurvey)) +
geom_bar(stat="identity")
shiny::runApp()
data <- data %>%
filter(StageID == "lowerlevel") %>%
group_by(Class) %>%
count(ParentAnsweringSurvey) %>%
mutate(percentage = n / sum(n)*100)
